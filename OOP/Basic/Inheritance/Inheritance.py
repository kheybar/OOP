"""


برنامه نویسی شی گرا الگوهای کد قابل استفاده مجدد را برای محدود کردن کد تکراری در پروژه را  ایجاد می کند
یکی از راه های دستیابی برنامه نویسی شی گرا به کد قابل استفاده مجدد، ارثبری است
زمانی که یک کلاس فرزند می تواند از کد کلاس دیگر استفاده کند

وراثت چیست:
وراثت زمانی است که یک کلاس از کد کلاس دیگر استفاده می کند
اگر از نظر زیست شناسی به وراثت فکر کنیم، می توانیم به فرزندی فکر کنیم که ویژگی های خاصی را از والدین خود به ارث برده است
یعنی ، کودک می تواند قد یا رنگ چشم والدین را به ارث ببرد
کودکان همچنین ممکن است نام خانوادگی یکسانی را با والدین خود داشته باشند

نام کلاس های فرزند:
subclass-child class

نام کلاس های پدر:
parent class-base class

کلاس والد:
کلاسهای والد الگویی را ایجاد می کنند که بر اساس آن می توان کلاس فرزند را بر اساس آن تنظیم کرد
کلاس های والد به ما امکان می دهد کلاس های فرزند را از طریق وراثت ایجاد کنیم بدون اینکه مجبور باشیم هر بار یک کد را دوباره بنویسیم
هر کلاس را می توان به عنوان کلاس والد در نظر گرفت، بنابراین هر کدام به جای الگوها، به تنهایی کلاسهای کاملاً کاربردی هستند

کلاس فرزند:
کلاس فرزند کلاس هایی هستند که از کلاس والد به ارث می رسند
این بدان معناست که هر کلاس فرزند قادر خواهد بود از متدها و متغیرهای کلاس والد استفاده کند


چطوری کلاس فرزند متوجه می شود بعضی چیزها باید در کلاس خودش بگرده و بعضی در کلاس پدر:
یک قانونی داریم به اسم (ام آر او) متود رزولوشن اردر که ترتیب رو برمیگردونه. با دستور هلپ میونیم ببینیمش
اول در خود کلاس، بعد در کلاس والد و بعد در بیلتین آبجکت

بیلتین آبجکت چیه:
تمام کلاس های پایتون از کلاسی به اسم آبجکت ارث بری می کنند. در پایتون2 به قبل مجبور بودیم موقع ایجاد کلاس
این مورد رو بنویسیم تا ارث بری صورت بگیرد ولی از پایتون3 به بعد، نیاز به نوشتن دستی نیست ولی در بکگراند
انجام می شود


بازنویسی متدهای کلاس والد:
متد‌ها و متغیرهایی که از کلاس والد به ارث میرسند همیشه مطلوب ما نیستند
گاهی نیاز داریم که رفتار متدها و متغیرها را تغییر دهیم
در این حالت میتوانیم آنها را بازنویسی یا اصطلاحا آوررایت کنیم
برای اینکار فقط کافیست متد یا متغیر را دوباره در کلاس فرزند ایجاد کنیم

super():
با تابع سوپر، می توانید به متدهای ارثی که در یک شیء کلاس رونویسی شده اند دسترسی پیدا کنید
وقتی از تابع سوپر استفاده می کنیم، از متد والد داخل متد فرزند استفاده می کنیم
به عنوان مثال، ممکن است بخواهیم یک جنبه از متد والد را با قابلیت های خاص بازنویسی کنیم اما
سپس بقیه متد اصلی والد را فراخوانی کنیم تا متد تمام شود
در کدهای قدیمی پایتون، در داخل سوپر، اول کلاس و بعد سلف رو می فرستادن ولی از پایتون3 به بعد نیازی نیست




"""
class Animal: # Parent | Super Class
    home = 'forest'

    def __init__(self, name):
        self.name = name

    def show(self):
        print('I Am Animal ...')
    


class Wolf(Animal): # Child | Subclass
    home = 'Mountain'

    def __init__(self, name, age):
        super().__init__(name)
        self.age = age

    def show(self):
        super().show()
        print('I Am Wolf ...')



alpha = Wolf('alpha', 5)
# help(alpha) # MRO
alpha.show()

