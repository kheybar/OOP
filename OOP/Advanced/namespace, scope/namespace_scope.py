"""


Namespace => built-in, global, enclosed, local (LEGB)
    globals(), locals()
    global, non-local

نیم اسپیس:
برای این که مشخص کنیم هرکدی، در چه محدوده ای می تونه به اطلاعات دسترسی داشته باشه. چهار دسته اند:
لوکال، اینکلوز، گلوبال، بیلت-این. این ها به شکل تودرتو هستند

بیلت-این:
خارجی ترین لایه هست و هر بار که مدهای پایتونی اجرا کنیم، این نیم اسپیس ایجاد می شود
هرجایی در کد که باشیم، می تونیم بصورت مستقیم بهش دسترسی داشته باشیم
کاربرد: یکسری اطلاعات که معمولا بدردمون می خوره رو مستقیم بهش دسترسی داشته باشیم
برای دیدن بیلت-این از دستور زیر:
print(dir(__builtins__))
تمام اکسپشن هایی که در پایتون هستند، تمام داندر مود ها، تمام فانکشن و متودهای داخلی پایتون رو برای ما می آورد


گلوبال:
اون هایی هستند که در ریشه برنامه اجرا می شوند. مثلا مستقیم در خود ماژول یک متغییر می سازیم و تکه ای داده ذخیره می کنیم
همه جا به این دسترسی داریم، چه کلاس، چه متود، چه فانکشن. مثال:
name = 'mahdi'


لوکال:
متغییر هایی که در فانکشن ها و متود ها تعریف می شوند. چرا که فقط محدوده به خود فانکشن است و ما از خارج از آن بهش
دسترسی نداریم. مثال:
def a():
    name = 'mahdi'


اینکلوز:
زمانی ایجاد می شود که ما از فانکشن های تودرتو استفاده کنیم. مثال:
def a():
    x = 1 # Enclosed
    def b():
        x = 2 # Local


نحوه رفتار:
در هر نقطه ای که فراخوانی بشه فرق می کنه
از داخل لوکال میگرده تا برسه به بیلت-این

-------------

globals(), locals()
این دو فانکشن برای ما مقادیر گلوبال و لوکال رو می اورند
گلوبالز: تمام مقادیری که در اسکوپ(نیم اسپیس) گلوبال هستند رو نمایش می دهد بصورت یک دیکشنری
لوکالز: اگر در ریشه برنامه صدا زده شود، مانند گلوبالز عمل می کند. ما از این فانکشن زمانی استفاده
می کنیم که در داخل کلاس یا فانکشنی باشد. این فانکشن، آرگومان های ورودی رو نیز در نظر می گیرد

-------------

کلمات کلیدی گلوبال و نان-لوکال:
نکته مهم: زمانی که ما در لوکال یک مقداری برای متغییر در نظر می گیریم و همون متغییر رو در گلوبال نیز
داریم، پایتون برای ما اون گلوبال رو با مقدار لوکال جایگزین نمی کند! بلکه در حافظه یک متغییر دیگر
می سازد. می توان با پرینت کردن آیدی این دو، به این مطلب پی برد

گلوبال:
حالا یک زمانی هست که ما در گلوبال یک متغییری داریم که می خواهیم در لوکال اون رو تغییر بدیم. با توجه به 
نکته بالا، اگر یک بار دیگر تعریف کنیم در لوکال، میاد و یک متغییر جدید می سازد ولی ما می خواهیم تغییر
بدهیم نه این که جدید بسازیم. برای این کار از کلمه کلیدی گلوبال استفاده می کنیم. گلوبال متغییر بیرونی را به داخل می آورد

نان-لوکال:
برای زمانی است که ما فانکشن تودرتو داریم. دوباره داستان بالا رو داریم که داره دوتا متغییر می سازه و این دو
متفاوت هستند و اگر بخوایم یکیشون کنیم باید از نان-لوکال استفاده کنیم. دیگه استفاده از کلمه کلیدی گلوبال
کاربردی نداره چرا که ما نیم اسپیس کلوزر و لوکال رو داریم نه گلوبال. در ضمن با نوشتن گلوبال، میاد یک متغییر
در ریشه برنامه نیز ایجاد می کند




"""

# Builtins
# print(dir(__builtins__))


# --- when call in local and we have global ---
# x = 'global'

# def local():
#     x = 'local'
#     print(x)

# local() # output => local
# -------


# --- when call in global and we have local too ---
# x = 'global'

# def local():
#     x = 'local'


# print(x) # => output global
# -------


# --- when call in local and we have enclosed too ---
# def enclosed():
#     x = 'enclosed'
#     def local():
#         x = 'local'
#         print(x)
#     local()


# enclosed() # output => local
# -------


# --- when we call in local and we have in global ---
# x = 'global'

# def enclosed():

#     def local():
#         print(x)
#     local()

# enclosed() # output => global
# -------



# --- globals() ---
# x = 1

# print(globals())
# -------


# --- locals() ---
# def local(x):
#     y = 2
#     print(locals())

# local(1) # output => {'x': 1, 'y': 2}
# -------



# --- global and non-local

# GLOBAL
# x = 1

# def one():
#     x = 2
#     print(id(x)) # different

# print(id(x)) # different
# one()


# but if we want to change global x:

# x = 1

# def one():
#     global x
#     x = 2
#     print(id(x)) # equal

# one()
# print(id(x)) # equal
# print(x) # new value for global x


# NON-LOCAL

# def outer():
#     x = 1
    
#     def inner():
#         # global x => if we use gloabl in enclosed and local, create a new variable in root!!!
#         x = 2
#         print(x, id(x)) # 2, different
    
#     inner()
#     print(x, id(x)) # 1, different

# outer()

# non-local
# def outer():
#     x = 1
    
#     def inner():
#         nonlocal x
#         x = 2
#         print(x, id(x)) # 2, equal
    
#     inner()
#     print(x, id(x)) # 1, equal

# outer()
# -------