"""



Random:
این ماژول برای ایجاد انتخاب های تصادفی در پایتون استفاده می شود
انتخاب ها می توانند یک عدد یا استرینگ و یا یک لیست باشند
نکته ای که خود مستندات پایتون هم بهش اشاره کرده اینه که از این ماژول به هیچ وجه برای مصارف امنیتی استفاده نکنید
به جاش میتونید از ماژول "سکرتز" استفاده کنید
اعداد تصادفی برای آمارشناسان و دانشمندان داده ضروری است
آنها می توانند برای اهداف مختلف مانند توضیح مفاهیم، رمزنگاری، توسعه بازی و غیره استفاده شوند


تولید اعداد تصادفی در محدوده پیش فرض 0 تا 1:
روش های مختلفی برای تولید اعداد تصادفی وجود دارد و رایج ترین آنها تولید اعداد تصادفی بین 0 تا 1 است
برای اینکار از تابع داخلی رندوم استفاده می کنیم
توجه: نکته ای که در اینجا ذکر می شود این است که تابع رندوم() هرگز نمی تواند یک عدد تصادفی با مقدار 1 ایجاد کند


ایجاد اعداد تصادفی بین هر محدوده داده شده:
تابع رندوم() عالی به نظر می رسد، اما محدودیت هایی نیز دارد
تولید اعداد تصادفی از محدوده 0 و 1 فراتر نمی رود
منظورم این است که شما همیشه اعداد تصادفی بین 0 تا 1 را جستجو نمی کنید، درست است؟
محدوده باید انعطاف پذیر باشد، اینطور نیست؟ بنابراین، چگونه می توانیم اعداد تصادفی بین هر محدوده مشخص ایجاد کنیم؟
ما تابع ()یونیفرم در ماژول رندوم پایتون داریم که به تولید اعداد تصادفی بین هر محدوده مشخص کمک می کند


تولید اعداد تصادفی صحیح:
تا کنون، هر عددی تصادفی که تولید کرده ایم، اعداد تصادفی با اعشار هستند
به این معنی که آنها یک عدد صحیح + اعشاری در خود دارند. اگر به اعداد تصادفی که فقط اعداد صحیح هستند نیاز داشته باشیم چه؟
یک تابع اختصاصی به نام رندیت() داریم تا اعداد صحیح تصادفی را در پایتون بین یک محدوده صحیح مشخص ایجاد کنیم
همچنین توجه داشته باشید که در حالی که یک عدد تصادفی صحیح تولید می شود ، بیشترین احتمال وجود دارد که سیستم یک عدد تصادفی مشابه را دو بار تولید کند
نباید اشتباه گرفته شود زیرا هر قرعه کشی از عدد تصادفی مستقل از دیگری است و تکرارها کاملاً خوب است


تولید اعداد تصادفی با step:
اگر بخواهید اعداد صحیح تصادفی بین یک محدوده مشخص شده اما با یک مرحله یا مقدار افزایشی بخواهید
آیا می توانیم چنین اعداد تصادفی تولید کنیم؟ کاملا بله
ما تابع رندرنج() را داریم که به ما امکان می دهد اعداد صحیح تصادفی بین دو محدوده مشخص شده با یک "استپ" یا مقدار افزایش تولید کنیم


انتخاب بین آیتم ها:
متود چویس با گرفتن یک دنباله، می تواند از بین آیتم های آن یکی را انتخاب کند


انتخاب بین آیتم ها با تعیین میزان شانس:
متود چویسس برای ما امکان تعیین مقدار شانس ایتم ها را مشخص می کند


دریافت نمونه از دنباله:
برای دریافت چندین نمونه از یک دنباله می توانیم از متود سمپل استفاده کنیم


جابجا کردن آیتم های دنباله:
برای درهم کردن آیتم های یک دنباله از متود شافل استفاده می کنیم. این متود مقداری را بر نمی گرداند و همان
دنباله را تغییر می دهد



"""
import random as rn


# a = rn.random() # generate one float number between zero and one
# print(a)


# b = rn.uniform(1, 18) # generate one float number between optional range
# print(b)


# c = rn.randint(1, 25) # generate one integer number between optional range
# print(c)


# d = rn.randrange(10, 30, 5) # generate integer number. style: choice in this list[10, 15, 20, 25, 30]
# print(d)


# names = ['Mahdi', 'Rose', 'Ali', 'Nazanin']


# e = rn.choice(names) # choice item from items 
# print(e)


# f = rn.choices(names, weights=[40, 40, 10, 10]) # choice item from items with chance
# print(f)


# g = rn.sample(names, 2) # sample from items
# print(g)


# h = rn.shuffle(names) # mess up sequence
# print(names)