"""


generator:
یک روش ساده تر برای ساخت آبجکت های ایتریبل هستند(آبجکت هایی که بتونیم در آن پیمایش کنیم)
فانکشن های معمولی نقطه مقابل جنریتور ها هستند. فانکشن های معمولی یک مقداری را برای ما بر می گرانند ولی
فانکشن های جنریتور به ما می گویند آبجکت شما یک جنریتور است. ما می توانیم روی آن ها پیمایش کنیم یا
تدیل به یک آبجکت دیگر مانند لیست کنیم. در این صورت به مقدار پردازش شده دسترسی پیدا می کنیم
یکی دیگر از نکات مهم بین این دو نوع این است که در فانکشن معمولی فقط یکبار توانایی بر گرداند
داریم و دیگر آنریچبل می شود. اما در جنریتور ها ما می توانیم بارها و بارهامقداری رو ییلد کنیم

دو روش برای ایجاد جنریتور ها وجود دارد. ۱-فانکشن ها ۲-اکسپرشن(کامپرشن)
معمولا بهمراه جنریتور ها از حلقه ها استفاده می کنیم. از مزایای جنریتور ها، پیمایش تک به تک روی آیتم ها است
جنریتور ها می توانند آخرین وضعیتی که در آن پیمایش شده است را حفظ کنند. درصورت تکرار متود نکست و نبود آیتم
در جنریتور، ارور استاپ ایتریشن برگردانده می شود.

Lazy Evaluation:
یکی از مفاهیم مهم ارزیابی تنبل است. جنریتور ها لیزی اولیشن هستند یعنی تا زمانی که مجبور نباشند، نتیجه ای
بر نمی گردانند. درواقع تا زمانی که مجبور نشه، اون وظیفه ای که بهش سپردیم رو انجام نمی ده. این باعث
می شود در منابع ما صرفه جویی شود. زمانی که اطلاعات ما خیلی زیاد است ما دیگر از لیست کامپریشن ها استفاده
نمی کنیم، بلکه از جنریتور کامپریشن ها استفاده می کنیم
حال چه زمانی اجرا می شوند؟ زمانی که یک مقداری رو ازش بگیریم. برای مثال متود نکست را روی آن فراخوانی کنیم



"""

def normal_func():
    return 'Hello Normal'
    return 'Hello Unreachable'


def generator():
    print('Start')
    for i in range(10):
        yield i

numbers = generator()
# print(next(numbers))


# generator expression
numbers = (num for num in range(11))

# for num in numbers: print(num)
num = list(numbers)
print(num)
