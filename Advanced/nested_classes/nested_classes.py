"""



nested classes:
به کلاس‌های گفته میشود که داخل یکدیگر باشند
کلاس‌هایی که فکر میکنید عملکرد مشابهی دارند را میتوانید داخل یکدیگر بسازید
استفاده از این نوع کلاس‌ها در پایتون آنچنان مرسوم نیست و کمتر جایی میتوانید کلاس‌های تودرتو را ببینید
تودرتو کردن یک کلاس باعث کاهش یا افزایش سرعت اجرا نمی شود
اکثر توسعه‌دهندگان پایتون کلاس‌های تودرتو ندارند، بنابراین وقتی این کار را انجام می‌دهید، قراردادهای پایتون را زیر پا می‌گذارید و
هزینه نگهداری را افزایش می‌دهید
برخلاف زبان جاوا، در پایتون رابطه خاصی بین کلاس داخلی و کلاس بیرونی وجود ندارد

ایجاد کلاس های تودر:
ساخت کلاس‌های تودرتو بسیار ساده بوده و فقط کافیست کلاس‌ها را داخل یکدیگر ایجاد کنید
هیچ محدودیتی در عمق این کلاس‌ها وجود ندارد و هر تعدا که بخواهید میتوانید کلاس داخل یکدیگر ایجاد کنید
دقت کنید که واقعا نیازی نیست عمق کلاس‌های تودرتو بیشتر از 1 باشد

ویژگی های آن:
در کلاس‌های تودرتو، کلاس بیرونی(اوتر) میتواند به کلاس داخلی(اینر) دسترسی داشته باشد اما کلاس داخلی نمیتواند به کلاس بیرونی دسترسی داشته باشد
برای اینکه بتوانید از کلاس بیرونی به کلاس درونی دسترسی داشته باشید باید از (سلف) استفاده کنید
شما نمیتوانید به طور مستقیم به کلاس داخلی دسترسی داشته باشید، اما اگر نیاز شد که این کار را انجام دهید باید از کلاس بیرونی عبور کنید
برای ساخت آبجکت از کلاس داخلی، از طریق کلاس بیرونی به کلاس داخل دسترسی پیدا می کنیم
واقعا باید مطمئن باشیم که هیچ وقت بصورت جدا به کلاس داخلی نیازی نداریم وگرنه دسترسی بهش با استفاده از
کلاس بیرونی نمیشه

مثال:
متا کلاس ها در جنگو وجود دارند که برای ایجاد آپشن است و حتما باید داخل کلاسی که مدنظره(فرم یا مدل) استفاده بشه چرا که
مثلا کلاس اول فیلدی هست که در دیتابیس ایجاد میشه ولی کلاس درونی آپشنه



"""

class Person:
    name = 'outer class'

    class Heart:
        name = 'inner class'


person_1 = Person()
print(person_1.name)

person_heart = Person().Heart()
print(person_heart.name)

print(person_1.Heart.name)