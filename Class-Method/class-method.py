"""



class methods:
    متد به فانکشن‌هایی گفته میشود که درون یک کلاس قرار دارند
    یک متد با نامش صدا زده میشود اما وابسته به یک آبجکت است
    متد ها با فانکشن ها جز مورد بالا، هیچ فرقی با همدیگر ندارد
    ما متود ها را در چون بهم ربط دارند و قرار است کنار هم کاری انجام دهند، در یک کلاس قرار میدهیم
    هر متد وظیفه انجام کار مشخصی را دارد
    متدها رفتارهای یک کلاس هستند که آبجکت‌ها میتوانند از آنها برای کار روی داده‌های خود استفاده کنند
    برای فراخوانی متدها باید از آبجکتی که از کلاس ساخته اید استفاده کنید
    بعد از ساخت متود و نمونه سازی، با دات نوتیشن می توانیم به آن دسترسی پیدا کنیم

    self:
    زمانی که ما یک متود می سازیم، به عنوان ورودی، خود آبجکت رو دریافت می کنه
    این کار به صورت اتوماتیک توسط پایتون صورت می گیرد و ما نمی بینیم
    برای اثبات این مسئله می تونیم خود سلف رو در متود پرینت کنیم و همچنین خود آبجکت رو و آدرس هر دو در مموری یکی است
    این کار به ما امکان می دهد به اتربیوت ها و بقیه ویژگی هادسترسی داشته باشیم
    نمونه کد:
    car_1.show_full_name(car_1)
    از اونجایی که ما داریم بدونه مقدار ارسال می کنیم باید به متود بگیم یدونه پارامتر بگیر
    در اکوسیستم پایتون پیشنهاد میشه که اسم این پارامتر رو سلف بذاریم

    built_in methods:
    ما در کلاس های پایتون یکسری متود داریم که خود پایتون به ما داده که یک کار خاص برای ما انجام میده
    به این متود ها میگن 'بیلت این متود' مثل اینیت
    اسم گذاری متود هایی که پایتون در اختیارمون قرار داده متفاوته(معروف به داندر متود)
    این کار برای شناسایی متودهای پایتون است و هیچوقت متودهای خودمون رو اینطوری نامگذاری نمی کنیم
    
    __init__:
    یکجورایی مقدمه ساز هست. به محض اینکه بیایم و یک آبجکتی رو بسازیم، این فعال میشه
    این متود یکی از پرکاربرترین ها هست
    کاربرد این متود:
    دیگه نیاز نیست بصورت مجزا برای هر آبجکت، پراپرتی مشخص کنیم
    اینیت به ما اجازه میده در زمان نمونه سازی پراپرتی ها رو بسازیم
    این پراپرتی ها رو داخل سلف ذخیره می کنیم
    چرا اینکار رو انجام میدیم؟ چون در اینیت ما سلف رو میگیرم که درواقع همون آبجکت هست. پس زمانی که
    ما میگیم سلف.نیم برابر بنز، داریم مینویسیم کارـ۱.نیم برابر بنز
    دقیقا همون کاری که داشتیم برای ایجاد پراپرتی انجام می دادیم



"""

class Car:
    def __init__(self, name, price): # built_in
        self.name = name
        self.price = price

    def show(self):
        print(f'{self.name} cost {self.price}')



car_1 = Car('Benz', 45000)
car_2 = Car('Bmw', 40000)

car_1.show()
car_2.show()